{"version":3,"sources":["Components/LocationDetails.js","Components/MapComponent.js","Queries/queries.js","Components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["LocationDetails","props","data","this","id","chain","name","distance","time","quick","sitdown","Component","mapStyles","width","height","MapComponent","console","log","google","zoom","style","initialCenter","lat","curLat","lng","curLng","center","position","icon","url","GoogleApiWrapper","apiKey","getCoffeeLocationsQuery","gql","Wrapper","loading","undefined","placesAt","variables","graphql","options","selectedLocation","client","ApolloClient","uri","App","chooseRandomLocation","Math","floor","random","setState","currLoc","state","className","type","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.840eb39b.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\n\n\nclass LocationDetails extends Component {\n    \n    constructor(props) {\n        super(props);\n    }\n\n\n    render() {\n\n        let data = this.props\n        // console.log(data);\n\n        return(\n            <div id=\"spots\">\n                <div id=\"chain\">\n                    <h5>Chain: {data.chain.name} .... {data.chain.distance} / {data.chain.time} Away</h5>\n                </div>\n                <div id=\"quick\">\n                    <h5>Quick: {data.quick.name} .... {data.quick.distance} / {data.quick.time} Away</h5>\n                </div>\n                <div id=\"sitdown\">\n                    <h5>Sitdown: {data.sitdown.name} .... {data.sitdown.distance} / {data.sitdown.time} Away</h5>\n                </div>\n            </div>\n\n        );\n\n        \n    }\n\n}\n\n//export default graphql(testQuery)(LocationDetails);\nexport default LocationDetails;\n","import React, { Component } from 'react';\n// import { graphql } from 'react-apollo';\n// import { testQuery } from '../Queries/queries';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\n\nconst mapStyles = {\n    width: '100%',\n    height: '100%',\n};\n\n\nclass MapComponent extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let data = this.props;\n        console.log(data);\n\n        return (\n            <div>\n                <Map\n                    google={this.props.google}\n                    zoom={15}\n                    style={mapStyles}\n                    initialCenter={{ lat: data.curLat, lng: data.curLng }}\n                    center = {{ lat: data.curLat, lng: data.curLng }}\n                >\n\n                <Marker position={{ lat: data.curLat, lng: data.curLng}} />\n                <Marker \n                    position={{ lat: data.chain.lat, lng: data.chain.lng}}\n                    icon={{\n                        url: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\",\n                    }} />\n\n                <Marker \n                    position={{ lat: data.sitdown.lat, lng: data.sitdown.lng}}\n                    icon={{\n                        url: \"http://maps.google.com/mapfiles/ms/icons/pink-dot.png\",\n                    }} />\n\n                <Marker \n                    position={{ lat: data.quick.lat, lng: data.quick.lng}}\n                    icon={{\n                        url: \"http://maps.google.com/mapfiles/ms/icons/purple-dot.png\",\n                    }} />\n\n\n                </Map>\n            </div>\n\n        );\n\n    }\n\n}\n\n//export default graphql(testQuery)(MapComponent);\nexport default GoogleApiWrapper({\n    apiKey: 'AIzaSyCn_2DiLqysX40xZh5KKeVadEJEpmkN76A'\n})(MapComponent);","import { gql } from \"apollo-boost\";\n\nconst getCoffeeLocationsQuery = gql` \nquery($lat: String!, $lng: String!) {\n    placesAt(lat: $lat, lng: $lng) {\n        sitdown {\n            name\n            distance\n            time\n            lat\n            lng\n        }\n        chain {\n            name\n            distance\n            time\n            lat\n            lng\n        }\n        quick {\n            name\n            distance\n            time\n            lat\n            lng\n        }\n    }\n}\n`\n\nexport {\n    getCoffeeLocationsQuery\n};","import React, {Component} from 'react';\nimport { graphql } from 'react-apollo';\nimport LocationDetails from './LocationDetails';\nimport MapComponent from './MapComponent';\nimport { getCoffeeLocationsQuery } from '../Queries/queries';\n\n\n\nclass Wrapper extends Component {\n    \n    constructor(props) {\n        super(props);\n\n    }\n\n\n    render() {\n        \n        let data = this.props.data;\n       \n        //  console.log(data.variables.lat);\n\n        if (data.loading === true || data.placesAt === undefined) {\n            return(\n                <div><p>Loading...</p></div>\n            );\n        } else {\n\n            let placesAt = data.placesAt;\n            return(\n                \n            <div>\n                <div id=\"title\">\n                    <h1>Get Joe Coffee :)</h1>\n                    <LocationDetails chain={placesAt.chain} sitdown={placesAt.sitdown} quick={placesAt.quick} />\n                </div>\n                <div id=\"map\"><MapComponent curLat={data.variables.lat} curLng={data.variables.lng} chain={placesAt.chain} sitdown={placesAt.sitdown} quick={placesAt.quick}/></div>\n\n            </div>\n\n            );\n        }\n    }\n\n}\n\nexport default graphql(getCoffeeLocationsQuery, {\n  options: (props) => {\n    return {\n      variables: {\n        lat: props.selectedLocation.lat,\n        lng: props.selectedLocation.lng\n      }\n    }\n  }\n})(Wrapper);\n","import React, { Component } from 'react';\nimport './App.css';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport Wrapper from './Components/Wrapper';\n\n\nconst client = new ApolloClient({\n  uri: '/ graphql', // Endpoint that we are making request queries to.\n});\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currLoc: { 'lat': '40.807537', 'lng': '-73.962570' }\n    };\n  }\n\n  // Used as a placeholder for now to demonstrate different locations.\n  chooseRandomLocation = () => {\n    let locations = [\n      { 'lat': '40.807537', 'lng': '-73.962570' }, //Columbia\n      { 'lat': '40.350121', 'lng': '-74.652781' }, //Princeton\n      { 'lat': '40.757972', 'lng': '-73.985556' }]; // Times Square\n\n    let rand = Math.floor(Math.random() * 3);\n    let selectedLocation = locations[rand];\n    console.log(selectedLocation);\n    this.setState({ currLoc: selectedLocation })\n    //return selectedLocation;\n  };\n\n\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div className=\"App\">\n          <Wrapper selectedLocation={this.state.currLoc} />\n          <div id=\"options\">\n            <form>\n              <button type=\"button\" className=\"button\" onClick={this.chooseRandomLocation}>Locate</button>\n            </form>\n          </div>\n        </div>\n\n      </ApolloProvider>\n    );\n  }\n\n\n}\n\n// export default graphql(getCoffeeLocationsQuery, {\n//   options: (props) => {\n//     return {\n//       variables: {\n//         lat: '40.807537',\n//         lng: '-73.962570'\n//       }\n//     }\n//   }\n// })(App);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}